#!/usr/bin/env groovy

def workerJob = 'oprog-img-rpi-build'
def branchId = 'dev'

properties([disableConcurrentBuilds(),
			buildDiscarder(
				logRotator(artifactDaysToKeepStr: '',
							artifactNumToKeepStr: '',
							daysToKeepStr: '',
							numToKeepStr: '5')),
			parameters([
				string(defaultValue: '', description: 'force building the specified revision, use HEAD by default', name: 'buildCommit')
			]),
			pipelineTriggers([pollSCM('H 05 * * *')])
		])

node {
	//debug
	println("Params: ${params}")

	stage('Cleanup') {
		deleteDir()
	}

	def bsRepo = ''
	def bsBranch = ''
	def scmVars = []

	def headInfo = ''
	def buildCommit = ''

	stage('Sources') {
		// use the same repo URL and branch as ones of this Jenkinsfile script
		def repoDef = scm.getUserRemoteConfigs()[0]
		bsRepo = repoDef.getUrl()
		def branchDef = scm.getBranches()[0]
		bsBranch = branchDef.getName()

		// debug
		println("bsRepo: ${bsRepo}")
		println("bsBranch: ${bsBranch}")

		scmDesc = [$class: 'GitSCM',
						branches: [[name: bsBranch]],
						doGenerateSubmoduleConfigurations: false,
						extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'pi-gen']],
						submoduleCfg: [],
						userRemoteConfigs: [[url: bsRepo]]
					]
		scmVars = checkout(scmDesc)

		if (params.buildCommit != '') {
			buildCommit = params.buildCommit
			dir('pi-gen') {
				sh """
					git checkout ${buildCommit}
				"""
			}
		} else {
			buildCommit = scmVars.GIT_COMMIT
		}

		//debug
		println("curCommit: ${scmVars.GIT_COMMIT}")
		println("buildCommit: ${buildCommit}")

		dir('pi-gen') {
			sh """
				# current head info (special for ones commented as 'RC: alphanumeric')
				git describe --tags --first-parent | grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}-' > ${env.WORKSPACE}/head-info || \
					git log -1 --date=format:'%F' --format='%h %ad %s' | \
						sed -n '/[[:space:]]RC:[[:space:]][^[:space:]]*/ {
								s/\\([[:alnum:]]*\\)[[:space:]]\\([^[:space:]]*\\)[[:space:]]RC:[[:space:]]\\([^[:space:]]*\\).*/\\2-rc.\\3.raspbian-g\\1/ p
							}
							/[[:space:]]RC:[[:space:]][^[:space:]]*/ !{
								s/\\([[:alnum:]]*\\)[[:space:]]\\([^[:space:]]*\\)[[:space:]].*/\\2-raspbian-g\\1/ p
							}' > ${env.WORKSPACE}/head-info
			"""
		}

		headInfo = readFile('head-info').trim()
	}

	//debug
	println("headInfo: ${headInfo}")
	println("workerJob: ${workerJob}")

	stage('Current') {
		println("Building current: ${headInfo}")

		build([job: workerJob,
			parameters: [
				[$class: 'StringParameterValue', name: 'bsRepo', value: bsRepo ],
				[$class: 'StringParameterValue', name: 'buildGitCommit', value: buildCommit ],
				[$class: 'StringParameterValue', name: 'buildInfo', value: headInfo ],

				[$class: 'BooleanParameterValue', name: 'isOldRelease', value: false ],

				[$class: 'StringParameterValue', name: 'branchId', value: branchId ]
			]
		])
	}
}
