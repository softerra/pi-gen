=======================
Iotcrafter Docker Build
=======================
* in a docker container (based on oprog-timer/cross-build-armv7l:stretch, which is based on debian:stretch)
* based on pi-gen's docker build:
** but the containter's image does not include pi-gen sources,
  instead they are mounted (therefore no need for separate mount of config file)
* initiated by running build-docker-iotcrafter.sh
	- build/update docker image
	- in the container
		- run pi-gen's build.sh
		- get RC code
		- run postbuild.sh with the RC code
*** build.sh
	- modified to include iotcrafter's variables exports
*** export-image/prerun.sh modified
# Obsolete
#+# align to sector size
#+BOOT_SIZE=$((BOOT_SIZE + 512 - $BOOT_SIZE % 512))
#+TOTAL_SIZE=$((TOTAL_SIZE + 512 - $TOTAL_SIZE % 512))
#
#This is done in order to make the resulting image file aligned to 512 bytes (sector size)
#which itself allows to find iotcrafter's data (with board key, wifi credentials etc)
#attached to the image by the installer right after the last sector of rootfs partition

*** postbuild.sh
	- saves RC code so build-docker-iotcrafter.sh can analyze it
	- restore ownership of produced files (they are created in the container by root)
* assumed that SKIP_ and EXPORT_ files are prepared so the next stages are built/exported
	- stage0	- build
	- stage1	- build
	- stage2	- build
	- stage2.1	- build & export

Stage2.1
--------
00-sys-upgrade
	- conditionally
		- $IOTCRAFTER_UPGRADE: apt-get upgrade
		- $IOTCRAFTER_RPI_UPDATE:rpi-update
01-install-iotcrafter
	- install nodejs (version is defined in the script)
	- install iotcrafter.list apt source
	- install iotc-core, iotc-ide
		TODO: ??
			- for release install fixed versions
			- for current build, install current versions
	- install iotc_init.sh
	- embed call of iotc_init.sh into /usr/lib/raspi-config/init_resize.sh
	- conditionally:
		- $IOTCRAFTER_ENABLE_UART:enable UART output
	- edit /etc/network/interfaces (the template is then used by iotc-init.sh to specify credentials passed by installer):

allow-hotplug wlan0
iface wlan0 inet dhcp
    wpa-ssid ssid
    wpa-psk key

02-sys-tweaks
	- enable ssh server
03-kernel-upgrade
	- build own kernel with supported modules and overlays using the revision of the kernel
		installed into rootfs at the moment (i.e. by stage0-stage2 or rpi-update)
	- build additional extra drivers

==========================
Automatic build by Jenkins
==========================

------------
Image naming
------------
* Release
YYYY-MM-DD-yyyymmmdd.raspbian.debdist-iotcrafter.img
* Current
YYYY-MM-DD-yyyymmmdd.raspbian.debdist-N-g<abbrev>-iotcrafter.img	- offset from release
YYYY-MM-DD-rc.<comment>.raspbian-g<abbrev>-iotcrafter.img			- commented release candidate
YYYY-MM-DD-raspbian-g<abbrev>-iotcrafter.img						- general name

* YYYY-MM-DD-yyyymmmdd.raspbian.debdist:
	** explicitely assigned tag to our release
	** consists of release date and
	respective tag of the releasse of Raspbian our release is based on,
	'-' are changed for '.' in the Raspbian tag
* YYYY-MM-DD - date of the commit, abbrev - is commit abbrev (used when git desribe --tags fails)
* -iotcrafter - suffix added by stage2.1
* debdist - is jessie,strecth,etc

Jenkins build is organized by two jobs:
	Jenkinsfile.rev
	===============
		master job which determines
			- the latest 'release' revision (tagged specifically)
			- current revision (if repo was changed and the HEAD is not 'release')
		run the slave job:
			- for every defined config - for 'release' revision
			- for every defined config - for 'current' revision
		Build identification:
		--------------------
		- determine 'release' revision to build:
			- list tags 'YYYY-MM-DD-*' since the last release (or pre-defined last release),
			pick out the latest one =>
				- build 'release'
				- build-name is the tag
		- determine whether HEAD is the 'release', if not =>
				- build 'current'
				- build-name is
					- <YYYY-MM-DD-*tag>								by 'git describe --tags' (assume tags are YYYY-MM-DD-*)
					- <YYYY-MM-DD-*tag>-N-g<commit>					by 'git describe --tags'
					- YYYY-MM-DD-rc.<comment>.raspbian-g<commit>	by git log if comment looks like RC: <comment> ...
					- YYYY-MM-DD-raspbian-g<commit>					by git log if comment is other
	Jenkinsfile.build
	=================
		slave/worker job which actually performs the build of a revision
			- gets params from master job (repo, revision to build etc)
			- prepares config file for pi-gen's build.sh
			- prepares SKIP_ and EXPORT_ filesas decribed above
			- runs iotcrafter/build-docker-iotcrafter.sh
			- copies result images to pre-defined dirs:
				- 'release' => deploy[base]/<branch-ID>/CURDATE/YYYY-MM-DD-XX...XX-iotcrafter.zip
							=> deploy[old_base]/CURDATE/bbb.img.zip (for old installer)
			Image file name:
			----------------
			<build-name>-iotcrafter.img
			example: 2017-11-24-20170907.raspbian.stretch-19-g87dd547-iotcrafter.zip

Jenkins setup:
* Create a pipeline for Jenkinsfile.rev
* Create a pipeline for Jenkinsfile.build - !!! the name of the job should be
	equal to the name defined in Jenkinsfile.rev by workerJob variable

NOTE: the jobs require a number of access approvals
